{"version":3,"sources":["components/DateInput.js","components/Photo.js","components/Catalog.js","App.js","serviceWorker.js","index.js"],"names":["DateInput","props","Fragment","value","onChange","changeDate","className","onClick","openCatalog","Photo","isEmpty","photo","url","indexOf","date","src","alt","Catalog","state","error","isLoaded","data","Date","this","arr","i","setDate","getDate","fetch","apodUrl","formatDate","apiKey","then","response","json","result","push","setState","media","filter","item","photoForGalery","map","width","height","photos","key","getTime","Component","moment","year","getFullYear","month","getMonth","day","App","photoInfo","isCatalogOpen","handleChange","startDate","localStorage","setItem","getPhoto","getItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.837918de.chunk.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport DatePicker from \"react-datepicker\"\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\n\r\nconst DateInput = props => (\r\n    <React.Fragment>\r\n        <DatePicker\r\n            value=\"Choose a Date\"\r\n            onChange={props.changeDate}\r\n        />\r\n        <button \r\n            className=\"btnCatalog\"\r\n            onClick={props.openCatalog}>\r\n                Catalog\r\n        </button>\r\n    </React.Fragment>\r\n  )\r\n\r\nDateInput.propTypes = {\r\n    changeDate: PropTypes.func,\r\n}\r\n\r\nexport default DateInput\r\n    \r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport ReactPlayer from 'react-player/lazy'\r\nimport { isEmpty } from 'lodash'\r\n\r\nconst Photo = props => \r\n    <React.Fragment>\r\n        <h2>NASA's Astronomy \r\n            {!isEmpty(props.photo.url) ?\r\n                (props.photo.url.indexOf('youtube') === -1 ? \r\n                ' Picture'\r\n                : ' Video') : null\r\n            } of {props.photo.date}</h2>\r\n        {!isEmpty(props.photo.url) ? \r\n            (props.photo.url.indexOf('youtube') === -1 ? \r\n                <img src={props.photo.url} alt=\"\" />\r\n                : <ReactPlayer url={props.photo.url} />\r\n            ) \r\n        : null}\r\n    </React.Fragment>\r\n    \r\n    \r\nPhoto.propTypes = {\r\n    photo: PropTypes.object,\r\n    date: PropTypes.string,\r\n}\r\n\r\nexport default Photo\r\n    \r\n","import React, { Component } from \"react\"\r\nimport Gallery from \"react-photo-gallery\";\r\nimport { isEmpty } from 'lodash'\r\nimport { formatDate, apodUrl, apiKey } from \"../App\"\r\n\r\n\r\nclass Catalog extends Component {\r\n\r\n  state = {\r\n    error: null,\r\n    isLoaded: false,\r\n    data: [],\r\n    date: new Date(),\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {date} = this.state \r\n    let arr = []\r\n    for (let i = 0; i < 20; i++){\r\n        date.setDate(date.getDate() - (i === 0 ? 0 : 1))\r\n        fetch(`${apodUrl}date=${formatDate(date)}&api_key=${apiKey}`)\r\n            .then(response => response.json())\r\n            .then(\r\n                result => {\r\n                    arr.push(result)\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        data: arr,\r\n                    })\r\n                },\r\n                error => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    })\r\n                }\r\n            )\r\n      }\r\n  }\r\n\r\n  render() {\r\n    const {data} = this.state\r\n    const media = !isEmpty(data) ? data.filter(item => item.url.indexOf('apod') >= 0) : null\r\n    const photoForGalery = !isEmpty(media) ? media.map(item => ({\r\n            src: item.url,\r\n            width: 2,\r\n            height: 2\r\n        })) : null\r\n\r\n      return (\r\n        <div className=\"catalog\">\r\n            <h2>Last NASA APOD's</h2>  \r\n            <Gallery \r\n                photos={!isEmpty(photoForGalery) ? photoForGalery : []}\r\n                key={new Date().getTime()}\r\n            />  \r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default Catalog\r\n\r\n    \r\n","import React, { Component } from \"react\"\nimport DateInput from \"./components/DateInput\"\nimport Photo from \"./components/Photo.js\"\nimport Catalog from \"./components/Catalog\"\nimport './App.css'\n\nexport const apiKey = 'lToNPLq7sV6ofpabhnCEvi0PCN0gcj7MpdvcxaHM'\nexport const apodUrl = 'https://api.nasa.gov/planetary/apod?'\n\nexport const formatDate = moment => {\n  let year = moment.getFullYear()\n  let month = moment.getMonth() + 1\n  let day = moment.getDate()\n  return `${year}-${month < 10 ? `0${month}` : month}-${day < 10 ? `0${day}` : day}`\n}\n\nclass App extends Component {\n\n  state = {\n    error: null,\n    isLoaded: false,\n    date: '',\n    photoInfo: {},\n    isCatalogOpen: false\n  };\n\n  componentDidMount() {\n\n    const url = localStorage.getItem('nasaDate') ? \n      `${apodUrl}date=${localStorage.getItem('nasaDate')}&api_key=${apiKey}` \n      : `${apodUrl}api_key=${apiKey}`\n\n    fetch(url)\n      .then(response => response.json())\n      .then(\n        result => {\n          this.setState({\n            isLoaded: true,\n            photoInfo: result,\n            date: result.date\n          })\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          })\n        }\n      )\n  }\n\n  handleChange = date => {\n    this.setState({\n      startDate: date,\n      isCatalogOpen: false\n    })\n    localStorage.setItem('nasaDate', formatDate(date))\n    this.getPhoto(formatDate(date))\n  }\n\n  getPhoto = date => {\n    fetch(`${apodUrl}date=${date}&api_key=${apiKey}`)\n      .then(response => response.json())\n      .then(\n        result => {\n          this.setState({\n            isLoaded: true,\n            photoInfo: result,\n          })\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          })\n        }\n      )\n  }\n\n  openCatalog = () => {\n    this.setState({\n      isCatalogOpen: true\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <React.Fragment>\n            <DateInput \n              changeDate={this.handleChange} \n              openCatalog ={this.openCatalog}\n            />\n            {this.state.isCatalogOpen ? \n              <Catalog /> :\n              <Photo \n               photo={this.state.photoInfo}\n               date ={this.state.date} \n              />\n            }\n          </React.Fragment>\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}